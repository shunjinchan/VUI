@charset "UTF-8";
/* 
* @Author: shunjinchan
* @Date:   2015-12-30 23:40:12
* @Last Modified by:   shunjinchan
* @Last Modified time: 2015-12-31 03:41:24
*/
.popup-title {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis; }

.popup {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  z-index: 1050;
  background: #fff;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  display: none;
  -webkit-transition-property: -webkit-transform;
  transition-property: -webkit-transform;
  transition-property: transform;
  transition-property: transform, -webkit-transform;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
  background-color: #f3f4f5;
  /* 底部滑入动画 */
  -webkit-transform: translate3d(0, 100%, 0);
  transform: translate3d(0, 100%, 0); }
  .popup.slide-from-bottom-to-top, .popup.slide-from-top-to-bottom {
    -webkit-transition-duration: 400ms;
    transition-duration: 400ms; }
  .popup.slide-from-bottom-to-top {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }
  .popup.slide-from-top-to-bottom {
    -webkit-transform: translate3d(0, 100%, 0);
    transform: translate3d(0, 100%, 0); }

.popup-body {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  overflow: auto;
  padding: 10px; }

.popup-header {
  height: 44px;
  line-height: 44px;
  position: relative;
  background-color: #fbfbfa; }
  .popup-header.top-bar {
    position: absolute; }
    .popup-header.top-bar ~ .popup-body {
      top: 44px; }
  .popup-header .close {
    position: absolute;
    height: 44px;
    width: 44px;
    line-height: 44px;
    right: 5px;
    top: 0;
    font-family: "iconfont";
    font-style: normal;
    -webkit-font-smoothing: antialiased;
    -webkit-text-stroke-width: 0.2px;
    -moz-osx-font-smoothing: grayscale;
    font-size: 20px;
    text-align: center;
    color: #585c64; }
  .popup-header .close::before {
    content: "\e639"; }
  .popup-header .close:active {
    color: #ccc; }

.popup-title {
  line-height: 24px;
  padding: 10px 50px 10px 15px; }

/*# sourceMappingURL=data:application/json;base64, */
